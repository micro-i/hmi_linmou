// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: algorithm.proto

#include "algorithm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace service_v2 {
PROTOBUF_CONSTEXPR Feature::Feature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kind_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeatureDefaultTypeInternal() {}
  union {
    Feature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeatureDefaultTypeInternal _Feature_default_instance_;
PROTOBUF_CONSTEXPR Features_FeatureEntry_DoNotUse::Features_FeatureEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Features_FeatureEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Features_FeatureEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Features_FeatureEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Features_FeatureEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Features_FeatureEntry_DoNotUseDefaultTypeInternal _Features_FeatureEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Features::Features(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feature_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeaturesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeaturesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeaturesDefaultTypeInternal() {}
  union {
    Features _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeaturesDefaultTypeInternal _Features_default_instance_;
PROTOBUF_CONSTEXPR InferenceRequest::InferenceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.features_)*/{}
  , /*decltype(_impl_.encoded_image_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dtype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.width_id_)*/0
  , /*decltype(_impl_.height_id_)*/0
  , /*decltype(_impl_.depth_id_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.depth_)*/0
  , /*decltype(_impl_.product_id_)*/0
  , /*decltype(_impl_.workpiece_id_)*/0
  , /*decltype(_impl_.task_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InferenceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InferenceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InferenceRequestDefaultTypeInternal() {}
  union {
    InferenceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InferenceRequestDefaultTypeInternal _InferenceRequest_default_instance_;
PROTOBUF_CONSTEXPR Point::Point(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;
PROTOBUF_CONSTEXPR SingleInferenceReply::SingleInferenceReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_.class_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mask_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xmin_)*/0
  , /*decltype(_impl_.ymin_)*/0
  , /*decltype(_impl_.zmin_)*/0
  , /*decltype(_impl_.xmax_)*/0
  , /*decltype(_impl_.ymax_)*/0
  , /*decltype(_impl_.zmax_)*/0
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleInferenceReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleInferenceReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleInferenceReplyDefaultTypeInternal() {}
  union {
    SingleInferenceReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleInferenceReplyDefaultTypeInternal _SingleInferenceReply_default_instance_;
PROTOBUF_CONSTEXPR InferenceReply::InferenceReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.singleinferencereply_)*/{}
  , /*decltype(_impl_.num_detections_)*/0
  , /*decltype(_impl_.width_id_)*/0
  , /*decltype(_impl_.height_id_)*/0
  , /*decltype(_impl_.depth_id_)*/0
  , /*decltype(_impl_.product_id_)*/0
  , /*decltype(_impl_.workpiece_id_)*/0
  , /*decltype(_impl_.task_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InferenceReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InferenceReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InferenceReplyDefaultTypeInternal() {}
  union {
    InferenceReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InferenceReplyDefaultTypeInternal _InferenceReply_default_instance_;
}  // namespace service_v2
static ::_pb::Metadata file_level_metadata_algorithm_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_algorithm_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_algorithm_2eproto = nullptr;

const uint32_t TableStruct_algorithm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_v2::Feature, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::service_v2::Feature, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::service_v2::Feature, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::service_v2::Features_FeatureEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::service_v2::Features_FeatureEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_v2::Features_FeatureEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::service_v2::Features_FeatureEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_v2::Features, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_v2::Features, _impl_.feature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceRequest, _impl_.width_id_),
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceRequest, _impl_.height_id_),
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceRequest, _impl_.depth_id_),
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceRequest, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceRequest, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceRequest, _impl_.depth_),
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceRequest, _impl_.encoded_image_),
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceRequest, _impl_.dtype_),
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceRequest, _impl_.product_id_),
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceRequest, _impl_.workpiece_id_),
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceRequest, _impl_.task_id_),
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceRequest, _impl_.features_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_v2::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_v2::Point, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::service_v2::Point, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::service_v2::Point, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_v2::SingleInferenceReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_v2::SingleInferenceReply, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::service_v2::SingleInferenceReply, _impl_.class_name_),
  PROTOBUF_FIELD_OFFSET(::service_v2::SingleInferenceReply, _impl_.xmin_),
  PROTOBUF_FIELD_OFFSET(::service_v2::SingleInferenceReply, _impl_.ymin_),
  PROTOBUF_FIELD_OFFSET(::service_v2::SingleInferenceReply, _impl_.zmin_),
  PROTOBUF_FIELD_OFFSET(::service_v2::SingleInferenceReply, _impl_.xmax_),
  PROTOBUF_FIELD_OFFSET(::service_v2::SingleInferenceReply, _impl_.ymax_),
  PROTOBUF_FIELD_OFFSET(::service_v2::SingleInferenceReply, _impl_.zmax_),
  PROTOBUF_FIELD_OFFSET(::service_v2::SingleInferenceReply, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::service_v2::SingleInferenceReply, _impl_.mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceReply, _impl_.num_detections_),
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceReply, _impl_.width_id_),
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceReply, _impl_.height_id_),
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceReply, _impl_.depth_id_),
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceReply, _impl_.product_id_),
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceReply, _impl_.workpiece_id_),
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceReply, _impl_.task_id_),
  PROTOBUF_FIELD_OFFSET(::service_v2::InferenceReply, _impl_.singleinferencereply_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::service_v2::Feature)},
  { 10, 18, -1, sizeof(::service_v2::Features_FeatureEntry_DoNotUse)},
  { 20, -1, -1, sizeof(::service_v2::Features)},
  { 27, -1, -1, sizeof(::service_v2::InferenceRequest)},
  { 45, -1, -1, sizeof(::service_v2::Point)},
  { 54, -1, -1, sizeof(::service_v2::SingleInferenceReply)},
  { 70, -1, -1, sizeof(::service_v2::InferenceReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::service_v2::_Feature_default_instance_._instance,
  &::service_v2::_Features_FeatureEntry_DoNotUse_default_instance_._instance,
  &::service_v2::_Features_default_instance_._instance,
  &::service_v2::_InferenceRequest_default_instance_._instance,
  &::service_v2::_Point_default_instance_._instance,
  &::service_v2::_SingleInferenceReply_default_instance_._instance,
  &::service_v2::_InferenceReply_default_instance_._instance,
};

const char descriptor_table_protodef_algorithm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017algorithm.proto\022\nservice_v2\"V\n\007Feature"
  "\022\021\n\007feature\030\001 \001(\tH\000\022\027\n\rfeature_float\030\002 \001"
  "(\002H\000\022\027\n\rfeature_int32\030\003 \001(\005H\000B\006\n\004kind\"\203\001"
  "\n\010Features\0222\n\007feature\030\001 \003(\0132!.service_v2"
  ".Features.FeatureEntry\032C\n\014FeatureEntry\022\013"
  "\n\003key\030\001 \001(\t\022\"\n\005value\030\002 \001(\0132\023.service_v2."
  "Feature:\0028\001\"\200\002\n\020InferenceRequest\022\020\n\010widt"
  "h_id\030\001 \001(\005\022\021\n\theight_id\030\002 \001(\005\022\020\n\010depth_i"
  "d\030\003 \001(\005\022\r\n\005width\030\004 \001(\005\022\016\n\006height\030\005 \001(\005\022\r"
  "\n\005depth\030\006 \001(\005\022\025\n\rencoded_image\030\007 \001(\014\022\r\n\005"
  "dtype\030\010 \001(\t\022\022\n\nproduct_id\030\t \001(\005\022\024\n\014workp"
  "iece_id\030\n \001(\005\022\017\n\007task_id\030\013 \001(\005\022&\n\010featur"
  "es\030\014 \003(\0132\024.service_v2.Features\"(\n\005Point\022"
  "\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001z\030\003 \001(\005\"\276\001\n\024Sin"
  "gleInferenceReply\022!\n\006points\030\001 \003(\0132\021.serv"
  "ice_v2.Point\022\022\n\nclass_name\030\002 \001(\t\022\014\n\004xmin"
  "\030\003 \001(\002\022\014\n\004ymin\030\004 \001(\002\022\014\n\004zmin\030\005 \001(\002\022\014\n\004xm"
  "ax\030\006 \001(\002\022\014\n\004ymax\030\007 \001(\002\022\014\n\004zmax\030\010 \001(\002\022\r\n\005"
  "score\030\t \001(\002\022\014\n\004mask\030\n \001(\014\"\332\001\n\016InferenceR"
  "eply\022\026\n\016num_detections\030\001 \001(\005\022\020\n\010width_id"
  "\030\002 \001(\005\022\021\n\theight_id\030\003 \001(\005\022\020\n\010depth_id\030\004 "
  "\001(\005\022\022\n\nproduct_id\030\005 \001(\005\022\024\n\014workpiece_id\030"
  "\006 \001(\005\022\017\n\007task_id\030\007 \001(\005\022>\n\024singleInferenc"
  "eReply\030\010 \003(\0132 .service_v2.SingleInferenc"
  "eReply2T\n\tInference\022G\n\tInference\022\034.servi"
  "ce_v2.InferenceRequest\032\032.service_v2.Infe"
  "renceReply\"\000B\002P\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_algorithm_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_algorithm_2eproto = {
    false, false, 1064, descriptor_table_protodef_algorithm_2eproto,
    "algorithm.proto",
    &descriptor_table_algorithm_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_algorithm_2eproto::offsets,
    file_level_metadata_algorithm_2eproto, file_level_enum_descriptors_algorithm_2eproto,
    file_level_service_descriptors_algorithm_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_algorithm_2eproto_getter() {
  return &descriptor_table_algorithm_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_algorithm_2eproto(&descriptor_table_algorithm_2eproto);
namespace service_v2 {

// ===================================================================

class Feature::_Internal {
 public:
};

Feature::Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:service_v2.Feature)
}
Feature::Feature(const Feature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Feature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kFeature: {
      _this->_internal_set_feature(from._internal_feature());
      break;
    }
    case kFeatureFloat: {
      _this->_internal_set_feature_float(from._internal_feature_float());
      break;
    }
    case kFeatureInt32: {
      _this->_internal_set_feature_int32(from._internal_feature_int32());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:service_v2.Feature)
}

inline void Feature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_kind();
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:service_v2.Feature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Feature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void Feature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Feature::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:service_v2.Feature)
  switch (kind_case()) {
    case kFeature: {
      _impl_.kind_.feature_.Destroy();
      break;
    }
    case kFeatureFloat: {
      // No need to clear
      break;
    }
    case kFeatureInt32: {
      // No need to clear
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}


void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:service_v2.Feature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Feature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_feature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "service_v2.Feature.feature"));
        } else
          goto handle_unusual;
        continue;
      // float feature_float = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _internal_set_feature_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 feature_int32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_feature_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Feature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_v2.Feature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string feature = 1;
  if (_internal_has_feature()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_feature().data(), static_cast<int>(this->_internal_feature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_v2.Feature.feature");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_feature(), target);
  }

  // float feature_float = 2;
  if (_internal_has_feature_float()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_feature_float(), target);
  }

  // int32 feature_int32 = 3;
  if (_internal_has_feature_int32()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_feature_int32(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_v2.Feature)
  return target;
}

size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_v2.Feature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // string feature = 1;
    case kFeature: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_feature());
      break;
    }
    // float feature_float = 2;
    case kFeatureFloat: {
      total_size += 1 + 4;
      break;
    }
    // int32 feature_int32 = 3;
    case kFeatureInt32: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_feature_int32());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Feature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Feature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Feature::GetClassData() const { return &_class_data_; }


void Feature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Feature*>(&to_msg);
  auto& from = static_cast<const Feature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:service_v2.Feature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kFeature: {
      _this->_internal_set_feature(from._internal_feature());
      break;
    }
    case kFeatureFloat: {
      _this->_internal_set_feature_float(from._internal_feature_float());
      break;
    }
    case kFeatureInt32: {
      _this->_internal_set_feature_int32(from._internal_feature_int32());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_v2.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  return true;
}

void Feature::InternalSwap(Feature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.kind_, other->_impl_.kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Feature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_algorithm_2eproto_getter, &descriptor_table_algorithm_2eproto_once,
      file_level_metadata_algorithm_2eproto[0]);
}

// ===================================================================

Features_FeatureEntry_DoNotUse::Features_FeatureEntry_DoNotUse() {}
Features_FeatureEntry_DoNotUse::Features_FeatureEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Features_FeatureEntry_DoNotUse::MergeFrom(const Features_FeatureEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Features_FeatureEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_algorithm_2eproto_getter, &descriptor_table_algorithm_2eproto_once,
      file_level_metadata_algorithm_2eproto[1]);
}

// ===================================================================

class Features::_Internal {
 public:
};

Features::Features(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Features::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:service_v2.Features)
}
Features::Features(const Features& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Features* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.feature_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.feature_.MergeFrom(from._impl_.feature_);
  // @@protoc_insertion_point(copy_constructor:service_v2.Features)
}

inline void Features::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.feature_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Features::~Features() {
  // @@protoc_insertion_point(destructor:service_v2.Features)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Features::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feature_.Destruct();
  _impl_.feature_.~MapField();
}

void Features::ArenaDtor(void* object) {
  Features* _this = reinterpret_cast< Features* >(object);
  _this->_impl_.feature_.Destruct();
}
void Features::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Features::Clear() {
// @@protoc_insertion_point(message_clear_start:service_v2.Features)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feature_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Features::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .service_v2.Feature> feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.feature_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Features::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_v2.Features)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .service_v2.Feature> feature = 1;
  if (!this->_internal_feature().empty()) {
    using MapType = ::_pb::Map<std::string, ::service_v2::Feature>;
    using WireHelper = Features_FeatureEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_feature();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "service_v2.Features.FeatureEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_v2.Features)
  return target;
}

size_t Features::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_v2.Features)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .service_v2.Feature> feature = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_feature_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::service_v2::Feature >::const_iterator
      it = this->_internal_feature().begin();
      it != this->_internal_feature().end(); ++it) {
    total_size += Features_FeatureEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Features::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Features::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Features::GetClassData() const { return &_class_data_; }


void Features::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Features*>(&to_msg);
  auto& from = static_cast<const Features&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:service_v2.Features)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.feature_.MergeFrom(from._impl_.feature_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Features::CopyFrom(const Features& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_v2.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Features::IsInitialized() const {
  return true;
}

void Features::InternalSwap(Features* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.feature_.InternalSwap(&other->_impl_.feature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Features::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_algorithm_2eproto_getter, &descriptor_table_algorithm_2eproto_once,
      file_level_metadata_algorithm_2eproto[2]);
}

// ===================================================================

class InferenceRequest::_Internal {
 public:
};

InferenceRequest::InferenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:service_v2.InferenceRequest)
}
InferenceRequest::InferenceRequest(const InferenceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InferenceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){from._impl_.features_}
    , decltype(_impl_.encoded_image_){}
    , decltype(_impl_.dtype_){}
    , decltype(_impl_.width_id_){}
    , decltype(_impl_.height_id_){}
    , decltype(_impl_.depth_id_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.depth_){}
    , decltype(_impl_.product_id_){}
    , decltype(_impl_.workpiece_id_){}
    , decltype(_impl_.task_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.encoded_image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoded_image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoded_image().empty()) {
    _this->_impl_.encoded_image_.Set(from._internal_encoded_image(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dtype().empty()) {
    _this->_impl_.dtype_.Set(from._internal_dtype(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.width_id_, &from._impl_.width_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.task_id_) -
    reinterpret_cast<char*>(&_impl_.width_id_)) + sizeof(_impl_.task_id_));
  // @@protoc_insertion_point(copy_constructor:service_v2.InferenceRequest)
}

inline void InferenceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){arena}
    , decltype(_impl_.encoded_image_){}
    , decltype(_impl_.dtype_){}
    , decltype(_impl_.width_id_){0}
    , decltype(_impl_.height_id_){0}
    , decltype(_impl_.depth_id_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.depth_){0}
    , decltype(_impl_.product_id_){0}
    , decltype(_impl_.workpiece_id_){0}
    , decltype(_impl_.task_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.encoded_image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoded_image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InferenceRequest::~InferenceRequest() {
  // @@protoc_insertion_point(destructor:service_v2.InferenceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InferenceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.features_.~RepeatedPtrField();
  _impl_.encoded_image_.Destroy();
  _impl_.dtype_.Destroy();
}

void InferenceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InferenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:service_v2.InferenceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.features_.Clear();
  _impl_.encoded_image_.ClearToEmpty();
  _impl_.dtype_.ClearToEmpty();
  ::memset(&_impl_.width_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.task_id_) -
      reinterpret_cast<char*>(&_impl_.width_id_)) + sizeof(_impl_.task_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InferenceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.width_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.height_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 depth_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.depth_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 depth = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes encoded_image = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_encoded_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dtype = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_dtype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "service_v2.InferenceRequest.dtype"));
        } else
          goto handle_unusual;
        continue;
      // int32 product_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.product_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 workpiece_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.workpiece_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 task_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_v2.Features features = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_features(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InferenceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_v2.InferenceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width_id = 1;
  if (this->_internal_width_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_width_id(), target);
  }

  // int32 height_id = 2;
  if (this->_internal_height_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_height_id(), target);
  }

  // int32 depth_id = 3;
  if (this->_internal_depth_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_depth_id(), target);
  }

  // int32 width = 4;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_width(), target);
  }

  // int32 height = 5;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_height(), target);
  }

  // int32 depth = 6;
  if (this->_internal_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_depth(), target);
  }

  // bytes encoded_image = 7;
  if (!this->_internal_encoded_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_encoded_image(), target);
  }

  // string dtype = 8;
  if (!this->_internal_dtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dtype().data(), static_cast<int>(this->_internal_dtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_v2.InferenceRequest.dtype");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_dtype(), target);
  }

  // int32 product_id = 9;
  if (this->_internal_product_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_product_id(), target);
  }

  // int32 workpiece_id = 10;
  if (this->_internal_workpiece_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_workpiece_id(), target);
  }

  // int32 task_id = 11;
  if (this->_internal_task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_task_id(), target);
  }

  // repeated .service_v2.Features features = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_features_size()); i < n; i++) {
    const auto& repfield = this->_internal_features(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_v2.InferenceRequest)
  return target;
}

size_t InferenceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_v2.InferenceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_v2.Features features = 12;
  total_size += 1UL * this->_internal_features_size();
  for (const auto& msg : this->_impl_.features_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes encoded_image = 7;
  if (!this->_internal_encoded_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded_image());
  }

  // string dtype = 8;
  if (!this->_internal_dtype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dtype());
  }

  // int32 width_id = 1;
  if (this->_internal_width_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width_id());
  }

  // int32 height_id = 2;
  if (this->_internal_height_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height_id());
  }

  // int32 depth_id = 3;
  if (this->_internal_depth_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_depth_id());
  }

  // int32 width = 4;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 5;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // int32 depth = 6;
  if (this->_internal_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_depth());
  }

  // int32 product_id = 9;
  if (this->_internal_product_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_product_id());
  }

  // int32 workpiece_id = 10;
  if (this->_internal_workpiece_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_workpiece_id());
  }

  // int32 task_id = 11;
  if (this->_internal_task_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_task_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InferenceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InferenceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InferenceRequest::GetClassData() const { return &_class_data_; }


void InferenceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InferenceRequest*>(&to_msg);
  auto& from = static_cast<const InferenceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:service_v2.InferenceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.features_.MergeFrom(from._impl_.features_);
  if (!from._internal_encoded_image().empty()) {
    _this->_internal_set_encoded_image(from._internal_encoded_image());
  }
  if (!from._internal_dtype().empty()) {
    _this->_internal_set_dtype(from._internal_dtype());
  }
  if (from._internal_width_id() != 0) {
    _this->_internal_set_width_id(from._internal_width_id());
  }
  if (from._internal_height_id() != 0) {
    _this->_internal_set_height_id(from._internal_height_id());
  }
  if (from._internal_depth_id() != 0) {
    _this->_internal_set_depth_id(from._internal_depth_id());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_depth() != 0) {
    _this->_internal_set_depth(from._internal_depth());
  }
  if (from._internal_product_id() != 0) {
    _this->_internal_set_product_id(from._internal_product_id());
  }
  if (from._internal_workpiece_id() != 0) {
    _this->_internal_set_workpiece_id(from._internal_workpiece_id());
  }
  if (from._internal_task_id() != 0) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InferenceRequest::CopyFrom(const InferenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_v2.InferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InferenceRequest::IsInitialized() const {
  return true;
}

void InferenceRequest::InternalSwap(InferenceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.features_.InternalSwap(&other->_impl_.features_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encoded_image_, lhs_arena,
      &other->_impl_.encoded_image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dtype_, lhs_arena,
      &other->_impl_.dtype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InferenceRequest, _impl_.task_id_)
      + sizeof(InferenceRequest::_impl_.task_id_)
      - PROTOBUF_FIELD_OFFSET(InferenceRequest, _impl_.width_id_)>(
          reinterpret_cast<char*>(&_impl_.width_id_),
          reinterpret_cast<char*>(&other->_impl_.width_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InferenceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_algorithm_2eproto_getter, &descriptor_table_algorithm_2eproto_once,
      file_level_metadata_algorithm_2eproto[3]);
}

// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:service_v2.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Point* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:service_v2.Point)
}

inline void Point::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:service_v2.Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:service_v2.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_v2.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 z = 3;
  if (this->_internal_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_v2.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_v2.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 z = 3;
  if (this->_internal_z() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_z());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }


void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Point*>(&to_msg);
  auto& from = static_cast<const Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:service_v2.Point)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_z() != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_v2.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.z_)
      + sizeof(Point::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_algorithm_2eproto_getter, &descriptor_table_algorithm_2eproto_once,
      file_level_metadata_algorithm_2eproto[4]);
}

// ===================================================================

class SingleInferenceReply::_Internal {
 public:
};

SingleInferenceReply::SingleInferenceReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:service_v2.SingleInferenceReply)
}
SingleInferenceReply::SingleInferenceReply(const SingleInferenceReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleInferenceReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , decltype(_impl_.class_name_){}
    , decltype(_impl_.mask_){}
    , decltype(_impl_.xmin_){}
    , decltype(_impl_.ymin_){}
    , decltype(_impl_.zmin_){}
    , decltype(_impl_.xmax_){}
    , decltype(_impl_.ymax_){}
    , decltype(_impl_.zmax_){}
    , decltype(_impl_.score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_name().empty()) {
    _this->_impl_.class_name_.Set(from._internal_class_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mask_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mask_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mask().empty()) {
    _this->_impl_.mask_.Set(from._internal_mask(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.xmin_, &from._impl_.xmin_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.score_) -
    reinterpret_cast<char*>(&_impl_.xmin_)) + sizeof(_impl_.score_));
  // @@protoc_insertion_point(copy_constructor:service_v2.SingleInferenceReply)
}

inline void SingleInferenceReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , decltype(_impl_.class_name_){}
    , decltype(_impl_.mask_){}
    , decltype(_impl_.xmin_){0}
    , decltype(_impl_.ymin_){0}
    , decltype(_impl_.zmin_){0}
    , decltype(_impl_.xmax_){0}
    , decltype(_impl_.ymax_){0}
    , decltype(_impl_.zmax_){0}
    , decltype(_impl_.score_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mask_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mask_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SingleInferenceReply::~SingleInferenceReply() {
  // @@protoc_insertion_point(destructor:service_v2.SingleInferenceReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleInferenceReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
  _impl_.class_name_.Destroy();
  _impl_.mask_.Destroy();
}

void SingleInferenceReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleInferenceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:service_v2.SingleInferenceReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _impl_.class_name_.ClearToEmpty();
  _impl_.mask_.ClearToEmpty();
  ::memset(&_impl_.xmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.score_) -
      reinterpret_cast<char*>(&_impl_.xmin_)) + sizeof(_impl_.score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleInferenceReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .service_v2.Point points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string class_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_class_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "service_v2.SingleInferenceReply.class_name"));
        } else
          goto handle_unusual;
        continue;
      // float xmin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.xmin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float ymin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.ymin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float zmin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.zmin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float xmax = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.xmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float ymax = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.ymax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float zmax = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.zmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float score = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bytes mask = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_mask();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleInferenceReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_v2.SingleInferenceReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .service_v2.Point points = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string class_name = 2;
  if (!this->_internal_class_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_name().data(), static_cast<int>(this->_internal_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service_v2.SingleInferenceReply.class_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_class_name(), target);
  }

  // float xmin = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_xmin = this->_internal_xmin();
  uint32_t raw_xmin;
  memcpy(&raw_xmin, &tmp_xmin, sizeof(tmp_xmin));
  if (raw_xmin != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_xmin(), target);
  }

  // float ymin = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ymin = this->_internal_ymin();
  uint32_t raw_ymin;
  memcpy(&raw_ymin, &tmp_ymin, sizeof(tmp_ymin));
  if (raw_ymin != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_ymin(), target);
  }

  // float zmin = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_zmin = this->_internal_zmin();
  uint32_t raw_zmin;
  memcpy(&raw_zmin, &tmp_zmin, sizeof(tmp_zmin));
  if (raw_zmin != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_zmin(), target);
  }

  // float xmax = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_xmax = this->_internal_xmax();
  uint32_t raw_xmax;
  memcpy(&raw_xmax, &tmp_xmax, sizeof(tmp_xmax));
  if (raw_xmax != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_xmax(), target);
  }

  // float ymax = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ymax = this->_internal_ymax();
  uint32_t raw_ymax;
  memcpy(&raw_ymax, &tmp_ymax, sizeof(tmp_ymax));
  if (raw_ymax != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_ymax(), target);
  }

  // float zmax = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_zmax = this->_internal_zmax();
  uint32_t raw_zmax;
  memcpy(&raw_zmax, &tmp_zmax, sizeof(tmp_zmax));
  if (raw_zmax != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_zmax(), target);
  }

  // float score = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_score(), target);
  }

  // bytes mask = 10;
  if (!this->_internal_mask().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_v2.SingleInferenceReply)
  return target;
}

size_t SingleInferenceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_v2.SingleInferenceReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_v2.Point points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string class_name = 2;
  if (!this->_internal_class_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_name());
  }

  // bytes mask = 10;
  if (!this->_internal_mask().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mask());
  }

  // float xmin = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_xmin = this->_internal_xmin();
  uint32_t raw_xmin;
  memcpy(&raw_xmin, &tmp_xmin, sizeof(tmp_xmin));
  if (raw_xmin != 0) {
    total_size += 1 + 4;
  }

  // float ymin = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ymin = this->_internal_ymin();
  uint32_t raw_ymin;
  memcpy(&raw_ymin, &tmp_ymin, sizeof(tmp_ymin));
  if (raw_ymin != 0) {
    total_size += 1 + 4;
  }

  // float zmin = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_zmin = this->_internal_zmin();
  uint32_t raw_zmin;
  memcpy(&raw_zmin, &tmp_zmin, sizeof(tmp_zmin));
  if (raw_zmin != 0) {
    total_size += 1 + 4;
  }

  // float xmax = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_xmax = this->_internal_xmax();
  uint32_t raw_xmax;
  memcpy(&raw_xmax, &tmp_xmax, sizeof(tmp_xmax));
  if (raw_xmax != 0) {
    total_size += 1 + 4;
  }

  // float ymax = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ymax = this->_internal_ymax();
  uint32_t raw_ymax;
  memcpy(&raw_ymax, &tmp_ymax, sizeof(tmp_ymax));
  if (raw_ymax != 0) {
    total_size += 1 + 4;
  }

  // float zmax = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_zmax = this->_internal_zmax();
  uint32_t raw_zmax;
  memcpy(&raw_zmax, &tmp_zmax, sizeof(tmp_zmax));
  if (raw_zmax != 0) {
    total_size += 1 + 4;
  }

  // float score = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleInferenceReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleInferenceReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleInferenceReply::GetClassData() const { return &_class_data_; }


void SingleInferenceReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleInferenceReply*>(&to_msg);
  auto& from = static_cast<const SingleInferenceReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:service_v2.SingleInferenceReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  if (!from._internal_class_name().empty()) {
    _this->_internal_set_class_name(from._internal_class_name());
  }
  if (!from._internal_mask().empty()) {
    _this->_internal_set_mask(from._internal_mask());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_xmin = from._internal_xmin();
  uint32_t raw_xmin;
  memcpy(&raw_xmin, &tmp_xmin, sizeof(tmp_xmin));
  if (raw_xmin != 0) {
    _this->_internal_set_xmin(from._internal_xmin());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ymin = from._internal_ymin();
  uint32_t raw_ymin;
  memcpy(&raw_ymin, &tmp_ymin, sizeof(tmp_ymin));
  if (raw_ymin != 0) {
    _this->_internal_set_ymin(from._internal_ymin());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_zmin = from._internal_zmin();
  uint32_t raw_zmin;
  memcpy(&raw_zmin, &tmp_zmin, sizeof(tmp_zmin));
  if (raw_zmin != 0) {
    _this->_internal_set_zmin(from._internal_zmin());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_xmax = from._internal_xmax();
  uint32_t raw_xmax;
  memcpy(&raw_xmax, &tmp_xmax, sizeof(tmp_xmax));
  if (raw_xmax != 0) {
    _this->_internal_set_xmax(from._internal_xmax());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ymax = from._internal_ymax();
  uint32_t raw_ymax;
  memcpy(&raw_ymax, &tmp_ymax, sizeof(tmp_ymax));
  if (raw_ymax != 0) {
    _this->_internal_set_ymax(from._internal_ymax());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_zmax = from._internal_zmax();
  uint32_t raw_zmax;
  memcpy(&raw_zmax, &tmp_zmax, sizeof(tmp_zmax));
  if (raw_zmax != 0) {
    _this->_internal_set_zmax(from._internal_zmax());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = from._internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleInferenceReply::CopyFrom(const SingleInferenceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_v2.SingleInferenceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleInferenceReply::IsInitialized() const {
  return true;
}

void SingleInferenceReply::InternalSwap(SingleInferenceReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.class_name_, lhs_arena,
      &other->_impl_.class_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mask_, lhs_arena,
      &other->_impl_.mask_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleInferenceReply, _impl_.score_)
      + sizeof(SingleInferenceReply::_impl_.score_)
      - PROTOBUF_FIELD_OFFSET(SingleInferenceReply, _impl_.xmin_)>(
          reinterpret_cast<char*>(&_impl_.xmin_),
          reinterpret_cast<char*>(&other->_impl_.xmin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleInferenceReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_algorithm_2eproto_getter, &descriptor_table_algorithm_2eproto_once,
      file_level_metadata_algorithm_2eproto[5]);
}

// ===================================================================

class InferenceReply::_Internal {
 public:
};

InferenceReply::InferenceReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:service_v2.InferenceReply)
}
InferenceReply::InferenceReply(const InferenceReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InferenceReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.singleinferencereply_){from._impl_.singleinferencereply_}
    , decltype(_impl_.num_detections_){}
    , decltype(_impl_.width_id_){}
    , decltype(_impl_.height_id_){}
    , decltype(_impl_.depth_id_){}
    , decltype(_impl_.product_id_){}
    , decltype(_impl_.workpiece_id_){}
    , decltype(_impl_.task_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.num_detections_, &from._impl_.num_detections_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.task_id_) -
    reinterpret_cast<char*>(&_impl_.num_detections_)) + sizeof(_impl_.task_id_));
  // @@protoc_insertion_point(copy_constructor:service_v2.InferenceReply)
}

inline void InferenceReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.singleinferencereply_){arena}
    , decltype(_impl_.num_detections_){0}
    , decltype(_impl_.width_id_){0}
    , decltype(_impl_.height_id_){0}
    , decltype(_impl_.depth_id_){0}
    , decltype(_impl_.product_id_){0}
    , decltype(_impl_.workpiece_id_){0}
    , decltype(_impl_.task_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InferenceReply::~InferenceReply() {
  // @@protoc_insertion_point(destructor:service_v2.InferenceReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InferenceReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.singleinferencereply_.~RepeatedPtrField();
}

void InferenceReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InferenceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:service_v2.InferenceReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.singleinferencereply_.Clear();
  ::memset(&_impl_.num_detections_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.task_id_) -
      reinterpret_cast<char*>(&_impl_.num_detections_)) + sizeof(_impl_.task_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InferenceReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 num_detections = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.num_detections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.width_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.height_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 depth_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.depth_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 product_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.product_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 workpiece_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.workpiece_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 task_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .service_v2.SingleInferenceReply singleInferenceReply = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_singleinferencereply(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InferenceReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service_v2.InferenceReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_detections = 1;
  if (this->_internal_num_detections() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_detections(), target);
  }

  // int32 width_id = 2;
  if (this->_internal_width_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_width_id(), target);
  }

  // int32 height_id = 3;
  if (this->_internal_height_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_height_id(), target);
  }

  // int32 depth_id = 4;
  if (this->_internal_depth_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_depth_id(), target);
  }

  // int32 product_id = 5;
  if (this->_internal_product_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_product_id(), target);
  }

  // int32 workpiece_id = 6;
  if (this->_internal_workpiece_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_workpiece_id(), target);
  }

  // int32 task_id = 7;
  if (this->_internal_task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_task_id(), target);
  }

  // repeated .service_v2.SingleInferenceReply singleInferenceReply = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_singleinferencereply_size()); i < n; i++) {
    const auto& repfield = this->_internal_singleinferencereply(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service_v2.InferenceReply)
  return target;
}

size_t InferenceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service_v2.InferenceReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .service_v2.SingleInferenceReply singleInferenceReply = 8;
  total_size += 1UL * this->_internal_singleinferencereply_size();
  for (const auto& msg : this->_impl_.singleinferencereply_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 num_detections = 1;
  if (this->_internal_num_detections() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_detections());
  }

  // int32 width_id = 2;
  if (this->_internal_width_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width_id());
  }

  // int32 height_id = 3;
  if (this->_internal_height_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height_id());
  }

  // int32 depth_id = 4;
  if (this->_internal_depth_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_depth_id());
  }

  // int32 product_id = 5;
  if (this->_internal_product_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_product_id());
  }

  // int32 workpiece_id = 6;
  if (this->_internal_workpiece_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_workpiece_id());
  }

  // int32 task_id = 7;
  if (this->_internal_task_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_task_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InferenceReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InferenceReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InferenceReply::GetClassData() const { return &_class_data_; }


void InferenceReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InferenceReply*>(&to_msg);
  auto& from = static_cast<const InferenceReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:service_v2.InferenceReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.singleinferencereply_.MergeFrom(from._impl_.singleinferencereply_);
  if (from._internal_num_detections() != 0) {
    _this->_internal_set_num_detections(from._internal_num_detections());
  }
  if (from._internal_width_id() != 0) {
    _this->_internal_set_width_id(from._internal_width_id());
  }
  if (from._internal_height_id() != 0) {
    _this->_internal_set_height_id(from._internal_height_id());
  }
  if (from._internal_depth_id() != 0) {
    _this->_internal_set_depth_id(from._internal_depth_id());
  }
  if (from._internal_product_id() != 0) {
    _this->_internal_set_product_id(from._internal_product_id());
  }
  if (from._internal_workpiece_id() != 0) {
    _this->_internal_set_workpiece_id(from._internal_workpiece_id());
  }
  if (from._internal_task_id() != 0) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InferenceReply::CopyFrom(const InferenceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service_v2.InferenceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InferenceReply::IsInitialized() const {
  return true;
}

void InferenceReply::InternalSwap(InferenceReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.singleinferencereply_.InternalSwap(&other->_impl_.singleinferencereply_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InferenceReply, _impl_.task_id_)
      + sizeof(InferenceReply::_impl_.task_id_)
      - PROTOBUF_FIELD_OFFSET(InferenceReply, _impl_.num_detections_)>(
          reinterpret_cast<char*>(&_impl_.num_detections_),
          reinterpret_cast<char*>(&other->_impl_.num_detections_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InferenceReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_algorithm_2eproto_getter, &descriptor_table_algorithm_2eproto_once,
      file_level_metadata_algorithm_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service_v2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service_v2::Feature*
Arena::CreateMaybeMessage< ::service_v2::Feature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_v2::Feature >(arena);
}
template<> PROTOBUF_NOINLINE ::service_v2::Features_FeatureEntry_DoNotUse*
Arena::CreateMaybeMessage< ::service_v2::Features_FeatureEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_v2::Features_FeatureEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::service_v2::Features*
Arena::CreateMaybeMessage< ::service_v2::Features >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_v2::Features >(arena);
}
template<> PROTOBUF_NOINLINE ::service_v2::InferenceRequest*
Arena::CreateMaybeMessage< ::service_v2::InferenceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_v2::InferenceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::service_v2::Point*
Arena::CreateMaybeMessage< ::service_v2::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_v2::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::service_v2::SingleInferenceReply*
Arena::CreateMaybeMessage< ::service_v2::SingleInferenceReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_v2::SingleInferenceReply >(arena);
}
template<> PROTOBUF_NOINLINE ::service_v2::InferenceReply*
Arena::CreateMaybeMessage< ::service_v2::InferenceReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service_v2::InferenceReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
